뉴런개수 증가시키고 함수도 조금씩 변형시켰습니다


class DeepSleepNet_Classification(nn.Module):  # input channel = 8channel / output = 5
    def __init__(self,in_channel=1,out_channel=6,layer=[64,128,128,128],sample_rate = 100):
        super(DeepSleepNet_Classification, self).__init__()

        self.conv1d_1 = nn.Conv1d(1,16, kernel_size=300, stride=20, padding=280)
        self.conv1d_2 = nn.Conv1d(16, 32, kernel_size=20, stride=2, padding=10)
        self.conv1d_3 = nn.Conv1d(32, 32, kernel_size=20, stride=2, padding=10)
        self.fc1 = nn.Linear(32*42,800)
        self.fc2 = nn.Linear(800,300)
        self.fc3 = nn.Linear(300,100)        
        self.fc4 = nn.Linear(100,out_channel) 

        self.LeakyReLU = nn.LeakyReLU()
        self.dropout = nn.Dropout(p=0.5)

    def forward(self, input):
        out = self.conv1d_1(input)
        out = self.LeakyReLU(out)
        out = self.conv1d_2(out)
        out = self.LeakyReLU(out)
        out = self.conv1d_3(out)
        out = self.LeakyReLU(out)        
        out = torch.flatten(out, 1)
        out = self.fc1(out)
        out = self.LeakyReLU(out)
        out = self.fc2(out)
        out = self.LeakyReLU(out)
        out = self.dropout(out)
        out = self.fc3(out)
        out = self.LeakyReLU(out)
        out = self.dropout(out)        
        out = self.fc4(out)

        return out
        
current_lr : 0.000250
train dataset : 137/2000 epochs spend time : 2.2895 sec / total_loss : 0.5297 correct : 24748/29960 -> 82.6035%
test dataset : 137/2000 epochs spend time : 0.2774 sec  / total_loss : 0.6324 correct : 5856/7556 -> 77.5013%
Early Stopping
best epoch : 106/2000 / accuracy : 78.163049%
==============================
